// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: portentries/portentries.proto

package portentries

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CreatePortRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreatePortRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetData() == nil {
		return CreatePortRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePortRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePortRequestValidationError is the validation error returned by
// CreatePortRequest.Validate if the designated constraints aren't met.
type CreatePortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePortRequestValidationError) ErrorName() string {
	return "CreatePortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePortRequestValidationError{}

// Validate checks the field values on EmptyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EmptyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StatusCode

	// no validation rules for Message

	return nil
}

// EmptyResponseValidationError is the validation error returned by
// EmptyResponse.Validate if the designated constraints aren't met.
type EmptyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyResponseValidationError) ErrorName() string { return "EmptyResponseValidationError" }

// Error satisfies the builtin error interface
func (e EmptyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyResponseValidationError{}

// Validate checks the field values on UpsertPortBulkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertPortBulkRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetData()) < 1 {
		return UpsertPortBulkRequestValidationError{
			field:  "Data",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertPortBulkRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpsertPortBulkRequestValidationError is the validation error returned by
// UpsertPortBulkRequest.Validate if the designated constraints aren't met.
type UpsertPortBulkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertPortBulkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertPortBulkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertPortBulkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertPortBulkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertPortBulkRequestValidationError) ErrorName() string {
	return "UpsertPortBulkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertPortBulkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertPortBulkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertPortBulkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertPortBulkRequestValidationError{}

// Validate checks the field values on ListPortsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListPortsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListPortsRequestValidationError is the validation error returned by
// ListPortsRequest.Validate if the designated constraints aren't met.
type ListPortsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPortsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPortsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPortsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPortsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPortsRequestValidationError) ErrorName() string { return "ListPortsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPortsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPortsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPortsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPortsRequestValidationError{}

// Validate checks the field values on ListPortsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListPortsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StatusCode

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPortsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPortsResponseValidationError is the validation error returned by
// ListPortsResponse.Validate if the designated constraints aren't met.
type ListPortsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPortsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPortsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPortsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPortsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPortsResponseValidationError) ErrorName() string {
	return "ListPortsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPortsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPortsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPortsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPortsResponseValidationError{}

// Validate checks the field values on Port with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Port) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetSlug()) != 5 {
		return PortValidationError{
			field:  "Slug",
			reason: "value length must be 5 runes",
		}

	}

	if !_Port_Slug_Pattern.MatchString(m.GetSlug()) {
		return PortValidationError{
			field:  "Slug",
			reason: "value does not match regex pattern \"^[A-Z0-9]+$\"",
		}
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for City

	// no validation rules for Province

	// no validation rules for Country

	if v, ok := interface{}(m.GetCoordinates()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortValidationError{
				field:  "Coordinates",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Timezone

	// no validation rules for Code

	return nil
}

// PortValidationError is the validation error returned by Port.Validate if the
// designated constraints aren't met.
type PortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortValidationError) ErrorName() string { return "PortValidationError" }

// Error satisfies the builtin error interface
func (e PortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortValidationError{}

var _Port_Slug_Pattern = regexp.MustCompile("^[A-Z0-9]+$")

// Validate checks the field values on Coordinates with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Coordinates) Validate() error {
	if m == nil {
		return nil
	}

	if val := m.GetLng(); val < -180 || val > 180 {
		return CoordinatesValidationError{
			field:  "Lng",
			reason: "value must be inside range [-180, 180]",
		}
	}

	if val := m.GetLat(); val < -90 || val > 90 {
		return CoordinatesValidationError{
			field:  "Lat",
			reason: "value must be inside range [-90, 90]",
		}
	}

	return nil
}

// CoordinatesValidationError is the validation error returned by
// Coordinates.Validate if the designated constraints aren't met.
type CoordinatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CoordinatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CoordinatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CoordinatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CoordinatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CoordinatesValidationError) ErrorName() string { return "CoordinatesValidationError" }

// Error satisfies the builtin error interface
func (e CoordinatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoordinates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CoordinatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CoordinatesValidationError{}

// Validate checks the field values on PortResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PortResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StatusCode

	// no validation rules for Message

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PortResponseValidationError is the validation error returned by
// PortResponse.Validate if the designated constraints aren't met.
type PortResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortResponseValidationError) ErrorName() string { return "PortResponseValidationError" }

// Error satisfies the builtin error interface
func (e PortResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortResponseValidationError{}

// Validate checks the field values on PortRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PortRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetSlug(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) != 5 {
			return PortRequestValidationError{
				field:  "Slug",
				reason: "value length must be 5 runes",
			}

		}

		if !_PortRequest_Slug_Pattern.MatchString(wrapper.GetValue()) {
			return PortRequestValidationError{
				field:  "Slug",
				reason: "value does not match regex pattern \"^[A-Z]+$\"",
			}
		}

	}

	return nil
}

// PortRequestValidationError is the validation error returned by
// PortRequest.Validate if the designated constraints aren't met.
type PortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortRequestValidationError) ErrorName() string { return "PortRequestValidationError" }

// Error satisfies the builtin error interface
func (e PortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortRequestValidationError{}

var _PortRequest_Slug_Pattern = regexp.MustCompile("^[A-Z]+$")

// Validate checks the field values on UpdatePortRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdatePortRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePortRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if wrapper := m.GetSlug(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) != 5 {
			return UpdatePortRequestValidationError{
				field:  "Slug",
				reason: "value length must be 5 runes",
			}

		}

		if !_UpdatePortRequest_Slug_Pattern.MatchString(wrapper.GetValue()) {
			return UpdatePortRequestValidationError{
				field:  "Slug",
				reason: "value does not match regex pattern \"^[A-Z]+$\"",
			}
		}

	}

	if m.GetData() == nil {
		return UpdatePortRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePortRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePortRequestValidationError is the validation error returned by
// UpdatePortRequest.Validate if the designated constraints aren't met.
type UpdatePortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePortRequestValidationError) ErrorName() string {
	return "UpdatePortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePortRequestValidationError{}

var _UpdatePortRequest_Slug_Pattern = regexp.MustCompile("^[A-Z]+$")

// Validate checks the field values on PortUpdatable with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PortUpdatable) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortUpdatableValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortUpdatableValidationError{
				field:  "City",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProvince()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortUpdatableValidationError{
				field:  "Province",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCountry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortUpdatableValidationError{
				field:  "Country",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCoordinates()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortUpdatableValidationError{
				field:  "Coordinates",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTimezone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortUpdatableValidationError{
				field:  "Timezone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PortUpdatableValidationError{
				field:  "Code",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PortUpdatableValidationError is the validation error returned by
// PortUpdatable.Validate if the designated constraints aren't met.
type PortUpdatableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortUpdatableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortUpdatableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortUpdatableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortUpdatableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortUpdatableValidationError) ErrorName() string { return "PortUpdatableValidationError" }

// Error satisfies the builtin error interface
func (e PortUpdatableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortUpdatable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortUpdatableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortUpdatableValidationError{}
